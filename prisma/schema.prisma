generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                @id @default(autoincrement())
  name              String
  username          String             @unique
  email             String             @unique
  password          String
  level             Int                @default(1)
  totalExp          Int                @default(0)
  isAdmin           Boolean            @default(false)
  recipeBookItemId  Int?               @unique
  recipeBookItems   RecipeBookItem[]
  userPostedRecipes UserPostedRecipe[]
  guildId           Int?
  guild             Guild?             @relation(fields: [guildId], references: [id])
  Rating            Rating[]
}

model RecipeBookItem {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  recipe    Recipe  @relation(fields: [recipeId], references: [id])
  recipeId  Int
  completed Boolean @default(false)
}

model Recipe {
  id             Int              @id @default(autoincrement())
  name           String
  image          String           @default("")
  description    String
  ingredients    String
  instructions   String
  level          Level            @relation(fields: [levelId], references: [id])
  levelId        Int              @default(1)
  recipeBookItem RecipeBookItem[]
}

model Level {
  id      Int      @id @default(autoincrement())
  level   String
  recipes Recipe[]
}

model UserPostedRecipe {
  id               Int                @id @default(autoincrement())
  name             String
  image            String             @default("")
  description      String
  userIngredients  UserIngredients[]
  UserInstructions UserInstructions[]
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           Int
  guild            Guild              @relation(fields: [guildId], references: [id], onDelete: Cascade)
  guildId          Int
  rating           Rating[]
}

model UserIngredients {
  id                 Int              @id @default(autoincrement())
  quantity           String
  name               String
  userPostedRecipe   UserPostedRecipe @relation(fields: [userPostedRecipeId], references: [id])
  userPostedRecipeId Int
}

model UserInstructions {
  id                 Int              @id @default(autoincrement())
  stepNumber         Int
  description        String
  userPostedRecipe   UserPostedRecipe @relation(fields: [userPostedRecipeId], references: [id])
  userPostedRecipeId Int
}

model Guild {
  id                Int                @id @default(autoincrement())
  name              String
  description       String
  score             Int
  users             User[]
  userPostedRecipes UserPostedRecipe[]
}

model Rating {
  id                 Int              @id @default(autoincrement())
  rating             Int
  writtenReview      String
  user               User             @relation(fields: [userId], references: [id])
  userId             Int
  userPostedRecipe   UserPostedRecipe @relation(fields: [userPostedRecipeId], references: [id])
  userPostedRecipeId Int
}
